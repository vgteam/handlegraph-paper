require(tidyverse)
bdsg.prof <- read.delim('fixed_handle_profiling.cleaned.tsv.gz')
summary(bdsg.prof)
wideScreen <- function(howWide=Sys.getenv("COLUMNS")) {
  options(width=as.integer(howWide))
}
wideScreen(140)
bdsg.prof$graph.model <- factor(bdsg.prof$sglib.model,levels(bdsg.prof$sglib.model)[c(4,1:3,5)])
bdsg.prof$handles.per.sec <- bdsg.prof$graph.node.count / bdsg.prof$handle.enumeration.time
bdsg.prof$edges.per.sec <- bdsg.prof$graph.edge.count / bdsg.prof$edge.traversal.time
bdsg.prof$steps.per.sec <- bdsg.prof$graph.step.count / bdsg.prof$path.traversal.time
bdsg.prof.df <- pivot_longer(bdsg.prof, cols=c(handles.per.sec, edges.per.sec, steps.per.sec))
colnames(bdsg.prof.df){
colnames(bdsg.prof.df)
ggplot(bdsg.prof.df, aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + facet_grid(name ~ ., scales = "free_y")
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + facet_grid(name ~ ., scales = "free_y")
levels(bdsg.prof.df$name)
bdsg.prof.df$name
levels(as.factor(bdsg.prof.df$name))
bdsg.prof.df$names <- as.factor(bdsg.prof.df$names)
bdsg.prof.df$name <- as.factor(bdsg.prof.df$name)
levels(as.factor(bdsg.prof.df$name))
levels(bdsg.prof.df$name)
levels(bdsg.prof.df$name) <- c("edges/s", "handles/s", "steps/s")
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + facet_grid(name ~ ., scales = "free_y")
levels(bdsg.prof.df$name) <- c("edges per second", "handles per second", "steps per second")
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + facet_grid(name ~ ., scales = "free_y")
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10("graph sequence length") + scale_y_log10() + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10("graph sequence length") + scale_y_log10("") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10("graph sequence length") + scale_y_log10("") + scale_color_discrete("graph model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggsave("iteration_per_second.pdf")
?geom_point
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point(size=1) + scale_x_log10("graph sequence length") + scale_y_log10("") + scale_color_discrete("graph model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point(size=0.1) + scale_x_log10("graph sequence length") + scale_y_log10("") + scale_color_discrete("graph model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point(size=0.3) + scale_x_log10("graph sequence length") + scale_y_log10("") + scale_color_discrete("graph model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point(size=0.5) + scale_x_log10("graph sequence length") + scale_y_log10("") + scale_color_discrete("graph model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggsave("iteration_per_second.pdf")
savehistory()
bdsg.prof.df.mem <- pivot_longer(bdsg.prof, cols=c(build.mem, load.mem))
bdsg.prof.df.mem$name <- as.factor(bdsg.prof.df.mem$name)
levels(bdsg.prof.df.mem$name) <- c("build memory (bytes)", "load memory (bytes)")
bdsg.prof.df.mem <- subset(bdsg.prof.df.mem, value>0) # remove a handful of failures
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point(size=0.5) + scale_x_log10("graph sequence length") + scale_y_log10("") + scale_color_discrete("graph model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggsave("iteration_per_second.pdf")
summary(bdsg.prof)
length(uniq(bdsg.prof$graph.name))
e(bdsg.prof$graph.name))
length(unique(bdsg.prof$graph.name))
length(unique(as.factor(bdsg.prof$graph.name)))
?scale_color_gradientn
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(x=graph.avg.degree, y=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(0,1,10,100))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(x=graph.avg.degree, y=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(0,1,10,20))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(x=graph.avg.degree, y=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(0,1,10,20,30,40))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(x=graph.avg.degree, y=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(1,10,20,30,40))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(x=graph.avg.degree, y=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("black", "blue", "red", "yellow"), breaks=c(1,10,20,30,40))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(x=graph.avg.degree, y=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(1,10,20,30,40))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(1,10,20,30,40))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(1,10,20,30,40))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(1,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10() + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10() + scale_y_continuous(lim=c(0,3)) + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10(lim=c(1000,100000)) + scale_y_continuous(lim=c(0,3)) + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10(lim=c(1000,100000)) + scale_y_continuous(lim=c(1,3)) + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10() + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10("graph sequence length (bp)") + scale_y_continuous("average node degree") + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggsave("graph_summary.png")
ggsave("graph_summary.pdf")
savehistory()
mean
colnames(bdsg.prof)
with(subset(bdsg.prof, graph.name == 'og'), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.name == 'og'), mean(load.mem/graph.seq.length)))
with(subset(bdsg.prof, graph.name == 'og'), mean(load.mem/graph.seq.length))
nrow(subset(bdsg.prof, graph.name == 'og))
nrow(subset(bdsg.prof, graph.name == 'og)))
nrow(subset(bdsg.prof, graph.name == 'og'))
summary(bdsg.prof$graph.name)
colnames(bdsg.prof)
colnames(bdsg.prof$graph.model)
sumarry(bdsg.prof$graph.model)
summary(bdsg.prof$graph.model)
with(subset(bdsg.prof, graph.model == 'og' && graph.seq.length > 0), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == 'og' && graph.seq.length > 0), load.mem)
with(subset(bdsg.prof, graph.model == "og"), load.mem)
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 0), load.mem)
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 0), mean(load.mem))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 0), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 0), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e5), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length < 1e5), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5), summary(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e5), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e5), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e6), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e4), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e6), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e6), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e6), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e6 & graph.seq.length < 1e7), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e6 & graph.seq.length < 1e7), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), summary(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), median(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), median(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "xg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), median(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e5 & graph.seq.length < 1e7), median(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), median(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), median(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "xg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
summary(bdsg.prof$graph.seq.length)
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e3 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "xg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "xg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e6 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
colnames(bdsg.prof$graph.model)
colnames(bdsg.prof)
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "vg" & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "xg" & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "xg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "xg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "xg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "xg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "pg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "og"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "hg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "vg"), mean(load.mem/graph.seq.length))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10("graph sequence length (bp)") + scale_y_continuous("average node degree") + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(bdsg.prof, aes(x=graph.seq.length, y=build.mem, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + theme_bw()
ggplot(bdsg.prof, aes(x=graph.seq.length, y=load.mem, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + theme_bw()
with(subset(bdsg.prof, graph.avg.path.depth > 1 & graph.model == "vg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 1 & graph.model == "hg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 1 & graph.model == "og"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 1 & graph.model == "pg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 1 & graph.model == "xg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth == 0 & graph.model == "xg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth == 0 & graph.model == "vg"), mean(load.mem/graph.seq.length))
subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__")) %>% summarize
subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__"))) %>% summarize
subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__")) %>% summarize()
subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__") %>% summarize()
subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__") %>%
subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__")) %>% summarize
bdsg.prof.hgsvc <- subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__"))
bdsg.prof.hgsvc <- subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__'))
bdsg.prof.hgsvc <- subset(bdsg.prof, startsWith(graph.name, "hgsvc__sv-paper-figures__HGSVC__regions__"))
bdsg.prof.hgsvc <- subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__"))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
-> % cat run.R | grep ^ggplot
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% summarize()
?summarize
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% group_by(graph.model) %>% summarize(bp.per=mean(load.mem/graph.seq.length))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length, build.bytes.per.bp=mean(load.mem/graph.seq.length)))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length, build.bytes.per.bp=mean(build.mem/graph.seq.length)))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length, build.bytes.per.bp=mean(build.mem/graph.seq.length)
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length)
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length)
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(handle.enumeration.time/graph.node.count))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/graph.node.count))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & grepl("22", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & grepl("22", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & grepl("22", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
savehistory()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
savehistory()
require(dplyr)
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
bdsg.prof <- read.delim('fixed_handle_profiling.cleaned.tsv.gz')
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
bdsg.prof$graph.model <- factor(bdsg.prof$sglib.model,levels(bdsg.prof$sglib.model)[c(4,1:3,5)])
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% ggplot()
require(tidyverse)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% ggplot
require(tidyverse)
bdsg.prof <- read.delim('fixed_handle_profiling.cleaned.tsv.gz')
bdsg.prof$graph.model <- factor(bdsg.prof$sglib.model,levels(bdsg.prof$sglib.model)[c(4,1:3,5)])
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% ggplot
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% ggplot(aes(x=handles.per.sec, y=edges.per.sec, color=graph.model))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% ggplot(aes(x=handles.per.sec, y=edges.per.sec, color=graph.model)) + geom_point()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% ggplot(aes(y=load.bytes.per.bp, color=graph.model)) + geom_bar()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% ggplot(aes(x=load.bytes.per.bp, color=graph.model)) + geom_bar()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% ggplot(aes(x=graph.model, y=load.bytes.per.bp, color=graph.model)) + geom_bar()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% ggplot(aes(x=graph.model, y=load.bytes.per.bp, color=graph.model)) + geom_point()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% ggplot(aes(x=graph.model, y=load.bytes.per.bp, color=graph.model)) + geom_violin()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(x=graph.model, y=load.bytes.per.bp, color=graph.model)) + geom_violin()
colnames(bdsg.prof)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(x=graph.model, y=load.mem*1000/graph.seq.length, color=graph.model)) + geom_violin()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(x=graph.model, y=build.mem*1000/graph.seq.length, color=graph.model)) + geom_violin()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(x=graph.model, y=build.mem*1000, y=graph.seq.length, color=graph.model)) + geom_point()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point()
subset(bdsg.prof, graph.seq.length > 0 & startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point()
subset(bdsg.prof, graph.seq.length > 100 & startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point()
subset(bdsg.prof, graph.seq.length > 1e5 & startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point()
subset(bdsg.prof, graph.seq.length < 1e5 & startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10() + geom_text(label=graph.name)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10() + geom_text(aes(label=graph.name))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_text(aes(label=graph.name))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_text(aes(label=strsplit(graph.name, "__")))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_text(aes(label=strsplit(graph.name, "__")[3]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_text(aes(label=strsplit(graph.name, "_")[3]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_text(aes(label=strsplit(as.character(graph.name), "__")[3]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_text(aes(label=strsplit(as.character(graph.name), "__")[-1]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_text(aes(label=strsplit(as.character(graph.name), "__")[1]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_text(aes(label=strsplit(as.character(graph.name), "__")))
strsplit("human__pan.AF0__MT.gfa", "__")
strsplit("human__pan.AF0__MT.gfa", "__")[]
strsplit("human__pan.AF0__MT.gfa", "__")[1]
as.vector(strsplit("human__pan.AF0__MT.gfa", "__"))
strsplit("human__pan.AF0__MT.gfa", "__")
strsplit("human__pan.AF0__MT.gfa", "__")[[1]]
strsplit("human__pan.AF0__MT.gfa", "__")[[1]][3]
strsplit(strsplit("human__pan.AF0__MT.gfa", "__")[[1]][3], ".")
strsplit(strsplit("human__pan.AF0__MT.gfa", "__")[[1]][3], "\.")
strsplit(strsplit("human__pan.AF0__MT.gfa", "__")[[1]][3], ".gfa")
strsplit(strsplit("human__pan.AF0__MT.gfa", "__")[[1]][3], ".gfa")[[1]]
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], ".gfa")[[1]]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], ".gfa")[[1]][1]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], ".gfa")))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], "g")))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], ".gfa")[[1]]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], ".gfa")))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], ".gfa")[[1]][0]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], ".gfa")[[1]][1]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], ".gfa")[[2]]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], ".gfa")[[0]]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], ".gfa")[[1]]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], ".gfa")))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3], ".g")))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(strsplit(as.character(graph.name), "__")[[1]][3])))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(as.character(graph.name), "__")[[1]][3]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(as.character(graph.name), "__")[[1]]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(as.character(graph.name), "__")[[1]][2]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(as.character(graph.name), "__")[[1]][1]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(as.character(graph.name), "__")[[1]][3]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(as.character(graph.name), "__")[[1]][3]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=as.character(strsplit(as.character(graph.name), "__")[[1]][3])))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(as.character(graph.name), "__")[[1]][3]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(as.character(graph.name), "__")[[1]][4]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=strsplit(as.character(graph.name), "__")[[1]]))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=as.character(strsplit(as.character(graph.name), "__")[[1]])))
?transform
?mutate
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=as.character(strsplit(as.character(graph.name), "__")[[1]][3]) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=as.character(strsplit(as.character(graph.name), "__")[[1]][3])) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "__")[[1]][3]) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "__")[[1]]) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=graph.name) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "human__pan.AF0") %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "human__pan.AF0")) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "human__pan.AF0__")) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "human__pan.AF0__")[[1]]) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "human__pan.AF0__")[1]) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "human__pan.AF0__")[[1]][2]) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "human__pan.AF0__")[[1]]) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "human__pan.AF0__")) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "human__pan.AF0__")[[1]]) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "human__pan.AF0__")[[1]][2]) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "human__pan.AF0__")[[1]]) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=strsplit(as.character(graph.name), "human__pan.AF0__")[1]) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__")
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__")[1]
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__")[[1]]
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector[1]
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector)[1]
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector)[[1]]
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector)[[1]][2]
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector)[[1]][3]
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector)[[]][3]
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector)[[:]][3]
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector)
?lapply
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector %>% lapply(first))
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector %>% lapply(third))
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector %>% lapply(last))
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector %>% lapply(last[[1]]))
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector %>% lapply(last))
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__") %>% as.vector)
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__"))
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% lapply(strsplit("__")))
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% strsplit("__"))
?lapply
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% lapply(function(x) strsplit(x, "__")))
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% sapply(function(x) strsplit(x, "__")))
?sapply
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% vapply(function(x) strsplit(x, "__")))
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% sapply(function(x) strsplit(x, "__")[3]))
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% sapply(function(x) strsplit(x, "__")[[1]][3]))
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% sapply(function(x) strsplit(x, "__")[[1]][3])) -> x
x
summary(x)
type(x)
typeof(x)
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% lapply(function(x) strsplit(x, "__")[[1]][3])) -> x
typeof(x)
x
x[1]
unlist(x)
?unlist
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% lapply(function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa"))) -> x
x
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% lapply(function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]])) -> x
x
(subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))$graph.name %>% as.character %>% lapply(function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]) %>% unlist)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text(aes(label=graph.subname)) + theme_bw()
savehistory()
require(ggrepel)
require(grepel)
install.packages("ggrepel")
require(ggrepel)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_text_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_label_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10() + geom_label_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + geom_label_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + geom_label_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10() + geom_label_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10() + geom_text_repel(aes(label=graph.subname)) + theme_bw()
savehistory()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10() + geom_text_repel(aes(label=graph.subname)) + theme_bw()
savehistory()
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10()
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=build.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=avg.path.depth)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
colnames(bdsg.prof)
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.avg.path.depth)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
?scale_color_brewer
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.avg.path.depth)) + geom_point() + scale_color_distiller(palette = "Spectral") + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.avg.path.depth)) + geom_point() + scale_color_distiller(palette = "Spectral") + scale_y_log10() + scale_x_log10()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.avg.path.depth)) + geom_point() + scale_color_distiller(palette = "Spectral") + scale_y_log10() + scale_x_log10()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.avg.path.depth)) + geom_point() + scale_color_distiller(palette = "Spectral") + scale_y_log10() + scale_x_log10() + theme_bw()
?scale_color_brewer
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.avg.path.depth)) + geom_point() + scale_color_distiller() + scale_y_log10() + scale_x_log10() + theme_bw()
?scale_color_brewer
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.avg.path.depth)) + geom_point() + scale_color_distiller(palette = "RdBu,") + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.avg.path.depth)) + geom_point() + scale_color_distiller(palette = "RdBu") + scale_y_log10() + scale_x_log10() + theme_bw()
?scale_color_brewer
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.avg.path.depth)) + geom_point() + scale_color_distiller(palette = "BrBG") + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.avg.path.depth)) + geom_point() + scale_color_distiller(palette = "PuOr") + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.avg.path.depth)) + geom_point() + scale_color_distiller(palette = "RdYlGn") + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.avg.path.depth)) + geom_point() + scale_color_distiller(palette = "PiYG") + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, shape=graph.model, color=graph.model, size=graph.avg.path.depth)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, color=graph.model, size=graph.avg.path.depth)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, hue=graph.model, size=graph.avg.path.depth)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, color=graph.model, hue=graph.avg.path.depth)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, color=graph.model, alpha=graph.avg.path.depth)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
savehistory()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.avg.path.depth/graph.seq.length, color=graph.model)) + geom_point() + theme_bw()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.avg.path.depth/graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, color=graph.model, alpha=graph.avg.path.depth)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, color=graph.model, alpha=graph.avg.path.depth)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% ggplot(aes(x=graph.model, y=load.bytes.per.bp, color=graph.model)) + geom_point()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
savehistory()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(x=graph.model, y=build.mem*1000/graph.seq.length, color=graph.model)) + geom_violin()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(x=graph.model, y=load.mem*1000/graph.seq.length, color=graph.model)) + geom_violin()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("Y", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(x=graph.model, y=load.mem*1000/graph.seq.length, color=graph.model)) + geom_violin()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(x=graph.model, y=load.mem*1000/graph.seq.length, color=graph.model)) + geom_violin()
savehistory()
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(x=graph.model, y=load.mem*1000/graph.seq.length, color=graph.model)) + geom_violin()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(x=graph.model, y=load.mem*1000/graph.seq.length, color=graph.model)) + geom_violin()
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, color=graph.model, alpha=graph.avg.path.depth)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
savehistory()
require(ggrepel)
require(tidyverse)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% as.data.frame
savehistory()
require(tidyverse)
require(ggrepel)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% as.data.frame
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% as.data.frame
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(width=140)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(width=200)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(width=200,n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(width=500,n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(width=Inf,n=100000)
options(tibble.width=Inf)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(width=Inf,n=100000)
getOption("width")
options(width=as.integer(Sys.getenv("COLUMNS"))
options(width=as.integer(Sys.getenv("COLUMNS")))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "yEscCol1__yEscCol1.asm.correctedReads.fpal10k.sort.dg") & !grepl("nopath", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "yEscCol1__yEscCol1.asm.correctedReads.fpal10k.sort.dg") & !grepl("nopath", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))
subset(bdsg.prof, startsWith(as.character(graph.name), "yEscCol1__yEscCol1.asm") & !grepl("nopath", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))
subset(bdsg.prof, startsWith(as.character(graph.name), "yEscCol1__yEscCol1.asm") & !grepl("nopath", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "yEscCol1__yEscCol1.asm") & !grepl("nopath", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)))) ) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "yEscCol1__yEscCol1.asm") & !grepl("nopath", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "yEscCol1__yEscCol1.asm") & !grepl("nopath", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "yEscCol1__yEscCol1.asm") & !grepl("nopath", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), build.time=mean(build.time), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), load.time=mean(load.time), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) 
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), build.time=mean(build.time), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), load.time=mean(load.time), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), build.time=mean(build.time/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), load.time=mean(load.time/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
savehistory()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
subset(bdsg.prof, graph.seq.length > 1000 & startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, color=graph.model, alpha=graph.avg.path.depth)) + geom_point() + scale_y_log10() + scale_x_log10() + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("noP", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% ggplot(aes(x=graph.model, y=load.mem*1000/graph.seq.length, color=graph.model)) + geom_violin()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=load.mem*1000, x=graph.seq.length, color=graph.model)) + geom_point() + scale_y_log10("load memory (bytes)") + scale_x_log10("graph sequence length (bp)") + scale_color_discrete("model") + geom_text_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=load.mem*1000, x=graph.node.count, color=graph.model)) + geom_point() + scale_y_log10("load memory (bytes)") + scale_x_log10("graph sequence length (bp)") + scale_color_discrete("model") + geom_text_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=load.mem*1000, x=graph.node.count, color=graph.model)) + geom_point() + scale_y_log10("load memory (bytes)") + scale_x_continuous("graph sequence length (bp)") + scale_color_discrete("model") + geom_text_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=load.mem*1000, x=graph.node.count, color=graph.model)) + geom_point() + scale_y_log10("load memory (bytes)") + scale_x_continuous("graph node count") + scale_color_discrete("model") + geom_text_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=load.mem*1000, x=graph.node.count, color=graph.model)) + geom_point() + scale_y_continuous("load memory (bytes)") + scale_x_continuous("graph node count") + scale_color_discrete("model") + geom_text_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=load.mem*1000, x=graph.node.count, color=graph.model)) + geom_point() + scale_y_continuous("load memory (bytes)") + scale_x_continuous("graph node count") + scale_color_discrete("model") + geom_label_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=load.mem*1000, x=graph.node.count, color=graph.model)) + geom_point() + scale_y_continuous("load memory (bytes)") + scale_x_continuous("graph node count") + scale_color_discrete("model") + geom_text_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=load.mem*1000, x=graph.node.count, color=graph.model)) + geom_point() + scale_y_continuous("load memory (bytes)") + scale_x_continuous("graph node count") + scale_color_discrete("model") + geom_text_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=load.mem*1000, x=graph.node.count, color=graph.model)) + geom_point() + scale_y_continuous("load memory (bytes)") + scale_x_continuous("graph node count") + scale_color_discrete("model") + geom_text(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=load.mem*1000, x=graph.node.count, color=graph.model)) + scale_y_continuous("load memory (bytes)") + scale_x_continuous("graph node count") + scale_color_discrete("model") + geom_text(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name)) & !grepl("noP", as.character(graph.name))) %>% mutate(graph.subname=unlist(lapply(as.character(graph.name), function(x) strsplit(strsplit(x, "__")[[1]][3], ".gfa")[[1]]))) %>% ggplot(aes(y=load.mem*1000, x=graph.node.count, color=graph.model)) + geom_point() + scale_y_log10("load memory (bytes)") + scale_x_log10("graph sequence length (bp)") + scale_color_discrete("model") + geom_text_repel(aes(label=graph.subname)) + theme_bw()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), mem.corr=corr(load.mem, graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
cor
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), mem.corr=cor(load.mem, graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), mem.corr=cor(load.mem, graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000) %>% mutate(x=mem.corr)
?mutate
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), mem.corr=cor(load.mem, graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000) %>% transmute(x=mem.corr)
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("MT", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), mem.corr=cor(load.mem, graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time)) %>% print(n=100000) %>% transmute(x=mem.corr)$x
savehistory()
bdsg.prof <- read.delim('fixed_handle_profiling.cleaned.tsv.gz')
wideScreen(140)
bdsg.prof$graph.model <- factor(bdsg.prof$sglib.model,levels(bdsg.prof$sglib.model)[c(4,1:3,5)])
bdsg.prof.df.mem <- pivot_longer(bdsg.prof, cols=c(build.mem, load.mem))
bdsg.prof.df.mem$name <- as.factor(bdsg.prof.df.mem$name)
levels(bdsg.prof.df.mem$name) <- c("build memory (bytes)", "load memory (bytes)")
bdsg.prof.df.mem <- subset(bdsg.prof.df.mem, value>0) # remove a handful of failures
source('run.R')
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10("graph sequence length (bp)", breaks = c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)) + scale_y_continuous("average node degree") + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=graph.seq.length, y=value*1000, color=graph.model)) + geom_point(size=0.5, alpha=I(1/2)) + scale_x_log10("graph sequence length (bp)", breaks= c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)) + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=graph.seq.length, y=value*1000, color=graph.model)) + geom_point(size=0.5, alpha=I(1/5)) + scale_x_log10("graph sequence length (bp)", breaks= c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)) + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=graph.seq.length, y=value*1000, color=graph.model)) + geom_point(size=0.5, alpha=I(1/10)) + scale_x_log10("graph sequence length (bp)", breaks= c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)) + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length), c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_log10("graph sequence length (bp)", breaks= c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)) + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length), c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_log10("graph sequence length (bp)", breaks= c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)) + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length), breaks=c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_log10("graph sequence length (bp)", breaks= c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)) + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length, c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_log10("graph sequence length (bp)", breaks= c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)) + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length, c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_discrete("graph sequence length (bp)", breaks= c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)) + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length, c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9)), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_discrete("graph sequence length (bp)") + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length, c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10)), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_discrete("graph sequence length (bp)") + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length, c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10)), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_discrete("graph sequence length (bp)") + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length, c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10)), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_discrete("graph sequence length (bp)") + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length, c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10)), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_discrete("graph sequence length (bp)") + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw() + theme(axis.text.x = element_text(angle = 45))
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length, c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10)), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_discrete("graph sequence length (bp)") + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 0.5))
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length, c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10)), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_discrete("graph sequence length (bp)") + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 0.75))
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=cut(graph.seq.length, c(1e0,1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10)), y=value*1000, color=graph.model)) + geom_boxplot(size=0.5, alpha=I(1/5)) + scale_x_discrete("graph sequence length (bp)") + scale_y_log10("", breaks = c(1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11)) + scale_color_discrete("model") + facet_grid(name ~ ., scales = "free_y") + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1))
savehistory()
